version: '3.4'

x-kc_dbconfig_env: &kcdbconfig_env
  KEYCLOAK_DATABASE_NAME: &kcdbname keycloak
  KEYCLOAK_DATABASE_HOST: postgres
  KEYCLOAK_DATABASE_USER: &kcdbuser keycloak
  # FIXME: take from env (which should be set to random)
  KEYCLOAK_DATABASE_PASSWORD: &kcdbpass keycloakpwd # pragma: allowlist secret

x-ldap_admin_env: &ldap_admin_env
  # FIXME: take from env (which should be set to random)
  LDAP_ADMIN_PASSWORD: &ldapadminpass ldapadminpwd # pragma: allowlist secret
  LDAP_ADMIN_USERNAME: &ldapadminuser admin

services:
  cfssl:
    image: ealen/echo-server # FIXME: Change to image and add build config
    networks:
      - canet
    volumes:
      - cfssl_data:/opt/cfssl/persistent

  postgres:
    image: postgis/postgis:15-3.3
    networks:
      - dbnet
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./pg_init:/docker-entrypoint-initdb.d
    environment:
      KEYCLOAK_PASSWORD: *kcdbpass # pragma: allowlist secret
      POSTGRES_PASSWORD: "FIXME: change to long random" # pragma: allowlist secret
#    depends_on:
#      cfssl:
#        condition: service_healthy
    healthcheck:
      test: "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  openldap:
    image: ealen/echo-server # FIXME: Change to image and add build config
    networks:
      - kcnet
      - dbnet
    ports:
      - '1636:1636'  # LDAPs
    environment:
      <<: *ldap_admin_env
      LDAP_SKIP_DEFAULT_TREE: yes
      LDAP_ALLOW_ANON_BINDING: no
      LDAP_ENABLE_TLS: 1
      # FIXME: get from env ??
      LDAP_ROOT: "dc=example,dc=org"
#      LDAP_LOGLEVEL: -1
      # FIXME: Use letsencrypt cert ?
      LDAP_TLS_CERT_FILE: /opt/bitnami/openldap/certs/openldap.crt
      LDAP_TLS_KEY_FILE: /opt/bitnami/openldap/certs/openldap.key
      LDAP_TLS_CA_FILE: /opt/bitnami/openldap/certs/openldapCA.crt
    volumes:
      - openldap_data:/bitnami/openldap
    depends_on:
      cfssl:
        condition: service_healthy

  keycloak:
    image: ealen/echo-server # FIXME: Change to image and add build config
    environment:
      <<: *kcdbconfig_env
    networks:
      - kcnet
      - dbnet
    depends_on:
      openldap:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # init container that sets up profile with realm on keycloak instance
  keycloak-init:
    image: adorsys/keycloak-config-cli:latest-21.0.1
    networks:
      - kcnet
    volumes:
      # FIXME: paths etc
      - ./keycloak-config:/config
    environment:
      <<: *ldap_admin_env
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_SSL-VERIFY: false  # Fixme set to true, the container should trust our CA
      KEYCLOAK_AVAILABILITYCHECK_ENABLED: true
      KEYCLOAK_AVAILABILITYCHECK_TIMEOUT: 30s
      IMPORT_VAR_SUBSTITUTION_ENABLED: true
      LDAP_CONNECTION_URL: ldap://openldap:1389
    depends_on:
      keycloak:
        condition: service_healthy

  rmapi:
    image: ealen/echo-server # FIXME: Change to image and add build config
    networks:
      - apinet
      - kcnet
      - canet
    depends_on:
      cfssl:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      keycloak-init:
        condition: service_completed_successfully

  nginx:
    image: nginx
    volumes:
     - ./nginx/templates:/etc/nginx/templates
     - ./nginx/includes:/etc/nginx/includes
    environment:
     - NGINX_HOST="${HOSTNAME}"
    networks:
      - apinet
      - kcnet
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      keycloak:
        condition: service_healthy
      rmapi:
        condition: service_healthy

networks:
  apinet:
  kcnet:
  canet:
  dbnet:

volumes:
  pg_data:
  cfssl_data:
  openldap_data:
  rmapi_data:
