:py:mod:`rasenmaeher_api.web.api.firstuser.views`
=================================================

.. py:module:: rasenmaeher_api.web.api.firstuser.views

.. autoapi-nested-parse::

   Firstuser API views.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.web.api.firstuser.views.check_if_api_is_active
   rasenmaeher_api.web.api.firstuser.views.get_is_active
   rasenmaeher_api.web.api.firstuser.views.get_check_code
   rasenmaeher_api.web.api.firstuser.views.post_disable
   rasenmaeher_api.web.api.firstuser.views.post_enable
   rasenmaeher_api.web.api.firstuser.views.post_admin_add
   rasenmaeher_api.web.api.firstuser.views.post_delete_admin
   rasenmaeher_api.web.api.firstuser.views.get_list_admin



Attributes
~~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.web.api.firstuser.views.router
   rasenmaeher_api.web.api.firstuser.views.LOGGER
   rasenmaeher_api.web.api.firstuser.views.CODE_CHAR_COUNT
   rasenmaeher_api.web.api.firstuser.views.CODE_ALPHABET


.. py:data:: router

   

.. py:data:: LOGGER

   

.. py:data:: CODE_CHAR_COUNT
   :value: 12

   

.. py:data:: CODE_ALPHABET

   

.. py:function:: check_if_api_is_active()
   :async:

   Simple function to check if the api is enabled or not.


.. py:function:: get_is_active(jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   /is-active, basically this one just checks if there is a row with special_rules='first-user' in management table.
   If not, then this API is deemed to be "disabled"...


.. py:function:: get_check_code(request, params = Depends())
   :async:

   /check-code?temp_admin_code=xxxx,
   Checks if the given code can be used or not in this /firstuser api route...


.. py:function:: post_disable(request, request_in = Body(None, examples=[FirstuserDisableIn.Config.schema_extra['examples']]), jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   This one disables the /firstuser API route. permit_str aka "admin hash" is required.
   Cannot be done with temp_admin_code.


.. py:function:: post_enable(request, request_in = Body(None, examples=[FirstuserEnableIn.Config.schema_extra['examples']]), jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   This one enables the /firstuser API route. permit_str aka "admin hash" is required.
   Cannot be done with temp_admin_code. This was mainly added because pytests kind a needs it.


.. py:function:: post_admin_add(request, request_in = Body(None, examples=[FirstuserAddAdminIn.Config.schema_extra['examples']]), jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   Add work_id aka username/identity. This work_id is also elevated to have managing permissions.


.. py:function:: post_delete_admin(request, request_in = Body(None, examples=[FirstuserDeleteAdminIn.Config.schema_extra['examples']]), jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   Remove work_id aka username/identity. The work_id's management hash is also removed from management table.


.. py:function:: get_list_admin(request, params = Depends(), jwt = Depends(JWTBearer(auto_error=True)))
   :async:

   Return available 'admin' id's and hashes.


