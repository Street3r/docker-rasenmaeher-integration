:py:mod:`rasenmaeher_api.jwtinit`
=================================

.. py:module:: rasenmaeher_api.jwtinit

.. autoapi-nested-parse::

   Init JWT issuer



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.jwtinit._check_public_keys_tilauspalvelu
   rasenmaeher_api.jwtinit._check_public_keys_kraftwerk
   rasenmaeher_api.jwtinit.resolve_pubkeydir
   rasenmaeher_api.jwtinit.check_public_keys
   rasenmaeher_api.jwtinit.check_private_key
   rasenmaeher_api.jwtinit.check_jwt_init
   rasenmaeher_api.jwtinit.resolve_rm_jwt_privkey_path
   rasenmaeher_api.jwtinit.resolve_rm_jwt_pubkey_path
   rasenmaeher_api.jwtinit.jwt_init



Attributes
~~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.jwtinit.LOGGER
   rasenmaeher_api.jwtinit.DEFAULT_KEY_PATH
   rasenmaeher_api.jwtinit.DEFAULT_PUB_PATH
   rasenmaeher_api.jwtinit.KRAFTWERK_KEYS_PATH
   rasenmaeher_api.jwtinit.HTTP_TIMEOUT


.. py:data:: LOGGER

   

.. py:data:: DEFAULT_KEY_PATH

   

.. py:data:: DEFAULT_PUB_PATH

   

.. py:data:: KRAFTWERK_KEYS_PATH

   

.. py:data:: HTTP_TIMEOUT
   :value: 2.0

   

.. py:function:: _check_public_keys_tilauspalvelu(pubkeydir)

   handle TILAUSPALVELU public key


.. py:function:: _check_public_keys_kraftwerk(pubkeydir)

   Handle KRAFTWERK Public Keys copy


.. py:function:: resolve_pubkeydir()

   Resolve the directory for public keys and make sure it exists


.. py:function:: check_public_keys()

   Check public keys


.. py:function:: check_private_key()

   Check that we instantiate the issuer


.. py:function:: check_jwt_init()

   Check that we have key we can use for issuing and decoding JWTs


.. py:function:: resolve_rm_jwt_privkey_path()

   resolve the path for the private key


.. py:function:: resolve_rm_jwt_pubkey_path(expect_name = None)

   resolve the path for the public key


.. py:function:: jwt_init()
   :async:

   If needed: Create keypair


