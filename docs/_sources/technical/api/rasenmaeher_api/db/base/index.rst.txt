:py:mod:`rasenmaeher_api.db.base`
=================================

.. py:module:: rasenmaeher_api.db.base

.. autoapi-nested-parse::

   The Gino baseclass with db connection wrapping



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.base.BaseModel



Functions
~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.base.bind_config
   rasenmaeher_api.db.base.init_db



Attributes
~~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.base.utcnow
   rasenmaeher_api.db.base.db
   rasenmaeher_api.db.base.DBModel
   rasenmaeher_api.db.base.LOGGER


.. py:data:: utcnow

   

.. py:data:: db

   

.. py:data:: DBModel
   :type: gino.Gino.Model

   

.. py:data:: LOGGER

   

.. py:class:: BaseModel


   Bases: :py:obj:`DBModel`

   Baseclass with common fields

   .. py:attribute:: __table_args__

      

   .. py:attribute:: pk

      

   .. py:attribute:: created

      

   .. py:attribute:: updated

      

   .. py:attribute:: deleted

      

   .. py:method:: by_pk(pkin, allow_deleted = False)
      :classmethod:
      :async:

      Get by pk


   .. py:method:: delete()
      :async:

      override delete method to set the deleted timestamp instead of removing the row



.. py:function:: bind_config()
   :async:

   Set bind from config and return


.. py:function:: init_db()
   :async:

   Create schemas and tables, normally one should use migration manager


