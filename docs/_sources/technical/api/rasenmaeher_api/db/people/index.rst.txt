:py:mod:`rasenmaeher_api.db.people`
===================================

.. py:module:: rasenmaeher_api.db.people

.. autoapi-nested-parse::

   Abstractions for people



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.people.Person
   rasenmaeher_api.db.people.Role



Functions
~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.people.post_user_crud
   rasenmaeher_api.db.people.user_created
   rasenmaeher_api.db.people.user_revoked
   rasenmaeher_api.db.people.user_promoted
   rasenmaeher_api.db.people.user_demoted
   rasenmaeher_api.db.people.pem_to_pfx



Attributes
~~~~~~~~~~

.. autoapisummary::

   rasenmaeher_api.db.people.LOGGER


.. py:data:: LOGGER

   

.. py:class:: Person


   Bases: :py:obj:`rasenmaeher_api.db.base.ORMBaseModel`

   People, pk is UUID and comes from basemodel

   NOTE: at some point we want to stop keeping track of people in our own db
   and only use keycloack as the store for actual users. In any case we need a nice pythonic
   abstraction layer so implement any queries you need to add as helpers here.

   .. py:property:: productapidata
      :type: libpvarki.schemas.product.UserCRUDRequest

      Return a model that is usable with the product integration APIs


   .. py:property:: certsubject
      :type: Dict[str, str]

      Return the dict that gets set to cert DN


   .. py:property:: privkeyfile
      :type: pathlib.Path

      Path to the private key


   .. py:property:: pfxfile
      :type: pathlib.Path

      Return a PKCS12 PFX file


   .. py:property:: certfile
      :type: pathlib.Path

      Path to the public cert


   .. py:property:: csrfile
      :type: pathlib.Path

      Path to the CSR file


   .. py:property:: pubkeyfile
      :type: pathlib.Path

      Path to the public key


   .. py:attribute:: __tablename__
      :value: 'users'

      

   .. py:attribute:: callsign

      

   .. py:attribute:: certspath

      

   .. py:attribute:: extra

      

   .. py:attribute:: revoke_reason

      

   .. py:method:: create_with_cert(callsign, extra = None)
      :classmethod:
      :async:

      Create the cert etc and save the person


   .. py:method:: revoke(reason)
      :async:

      Revokes the cert with given reason and makes user deleted see validate_reason for info on reasons


   .. py:method:: delete()
      :async:

      Revoke the cert on delete


   .. py:method:: list(include_deleted = False)
      :classmethod:
      :async:

      List people


   .. py:method:: by_role(role)
      :classmethod:
      :async:

      List people that have given role, if role is None list all people


   .. py:method:: by_callsign(callsign, allow_deleted = False)
      :classmethod:
      :async:

      Get by callsign


   .. py:method:: is_callsign_available(callsign)
      :classmethod:
      :async:

      Is callsign available


   .. py:method:: by_mtlsjwt_payload(payload, allow_deleted = False)
      :classmethod:
      :async:

      Get by MTLSorJWTMiddleWare payload


   .. py:method:: get_cert_pem()

      Read the cert from under certspath and return the PEM


   .. py:method:: get_cert_pfx()

      Read the cert and private key from under certspath and return the PFX container


   .. py:method:: _get_role(role)
      :async:

      Internal helper for DRY


   .. py:method:: has_role(role)
      :async:

      Check if this user has given role


   .. py:method:: assign_role(role)
      :async:

      Assign a role, return true if role was created, false if it already existed


   .. py:method:: remove_role(role)
      :async:

      Remove a role, return true if role was removed, false if it wasn't assigned


   .. py:method:: roles_set()
      :async:

      Shorthand


   .. py:method:: roles()
      :async:

      Roles of this person



.. py:class:: Role


   Bases: :py:obj:`rasenmaeher_api.db.base.DBModel`

   Give a person a role

   .. py:attribute:: __tablename__
      :value: 'roles'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: pk

      

   .. py:attribute:: created

      

   .. py:attribute:: updated

      

   .. py:attribute:: user

      

   .. py:attribute:: role

      

   .. py:attribute:: _idx

      


.. py:function:: post_user_crud(userinfo, endpoint_suffix)
   :async:

   Wrapper to be more DRY in the basic CRUD things


.. py:function:: user_created(person)
   :async:

   New user was created


.. py:function:: user_revoked(person)
   :async:

   Old user was revoked


.. py:function:: user_promoted(person)
   :async:

   Old user was promoted to admin (granted role 'admin')


.. py:function:: user_demoted(person)
   :async:

   Old user was demoted from admin (removed role 'admin')


.. py:function:: pem_to_pfx(pem_key, pem_cert)

   Convert PEM data to PFX (PKCS12).


